{
  "basic": {
    "name": "Basic",
    "description": "Basic project structure with minimal ignores",
    "gitignore": [
      "# List of ignore folder and files",
      "/[Tt]emp/",
      "# List of ignore files",
      "*.exe",
      "*.txt"
    ],
    "readme_template": "# PROJECT TITLE\n\nSoftware Version: [Version]\n\n## Description\nThis software is used for..."
  },
  "unity": {
    "name": "Unity",
    "description": "Unity game development project",
    "gitignore": [
      "# Unity generated folders and files",
      "/[Ll]ibrary/",
      "/[Tt]emp/",
      "/[Ll]ogs/",
      "/[Uu]serSettings/",
      "/[Oo]bj/",
      "/[Bb]uild/",
      "/[Bb]uilds/",
      "# Unity cache and temporary files",
      "*.tmp",
      "*.user",
      "*.userprefs",
      "*.pidb",
      "*.booproj",
      "*.svd",
      "*.pdb",
      "*.mdb",
      "*.opendb",
      "*.VC.db",
      "# Unity3D generated meta files",
      "*.pidb.meta",
      "*.pdb.meta",
      "*.mdb.meta",
      "# Unity3D generated file on crash reports",
      "sysinfo.txt",
      "# Builds",
      "*.apk",
      "*.aab",
      "*.unitypackage"
    ],
    "readme_template": "# Unity Project\n\nUnity Version: [Your Unity Version]\n\n## Description\nA Unity game development project.\n\n## Setup\n1. Open the project in Unity\n2. Ensure you have the correct Unity version installed\n3. Import any required packages\n\n## Build Instructions\n[Add your build instructions here]"
  },
  "web": {
    "name": "Web Development",
    "description": "Web development project with Node.js",
    "gitignore": [
      "# Dependencies",
      "node_modules/",
      "npm-debug.log*",
      "yarn-debug.log*",
      "yarn-error.log*",
      "# Runtime data",
      "pids",
      "*.pid",
      "*.seed",
      "*.pid.lock",
      "# Coverage directory used by tools like istanbul",
      "coverage/",
      "*.lcov",
      "# Build outputs",
      "dist/",
      "build/",
      "# Environment variables",
      ".env",
      ".env.local",
      ".env.development.local",
      ".env.test.local",
      ".env.production.local",
      "# Logs",
      "logs",
      "*.log",
      "# Editor directories and files",
      ".vscode/",
      ".DS_Store",
      "Thumbs.db"
    ],
    "readme_template": "# Web Project\n\n## Description\nA web development project.\n\n## Installation\n```bash\nnpm install\n```\n\n## Usage\n```bash\nnpm start\n```\n\n## Build\n```bash\nnpm run build\n```"
  },
  "python": {
    "name": "Python",
    "description": "Python project with virtual environment",
    "gitignore": [
      "# Byte-compiled / optimized / DLL files",
      "__pycache__/",
      "*.py[cod]",
      "*$py.class",
      "# Distribution / packaging",
      ".Python",
      "build/",
      "develop-eggs/",
      "dist/",
      "downloads/",
      "eggs/",
      ".eggs/",
      "lib/",
      "lib64/",
      "parts/",
      "sdist/",
      "var/",
      "wheels/",
      "*.egg-info/",
      ".installed.cfg",
      "*.egg",
      "# PyInstaller",
      "*.manifest",
      "*.spec",
      "# Virtual environments",
      "venv/",
      "env/",
      "ENV/",
      ".env",
      ".venv",
      "# IDE",
      ".vscode/",
      ".idea/",
      "*.swp",
      "*.swo",
      "*~",
      "# OS generated files",
      ".DS_Store",
      ".DS_Store?",
      "._*",
      ".Spotlight-V100",
      ".Trashes",
      "ehthumbs.db",
      "Thumbs.db"
    ],
    "readme_template": "# Python Project\n\n## Description\nA Python project.\n\n## Installation\n```bash\npip install -r requirements.txt\n```\n\n## Usage\n```bash\npython main.py\n```\n\n## Virtual Environment\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -r requirements.txt\n```"
  },
  "android": {
    "name": "Android",
    "description": "Android development project",
    "gitignore": [
      "# Built application files",
      "*.apk",
      "*.aar",
      "*.ap_",
      "*.aab",
      "# Files for the ART/Dalvik VM",
      "*.dex",
      "# Java class files",
      "*.class",
      "# Generated files",
      "bin/",
      "gen/",
      "out/",
      "# Gradle files",
      ".gradle/",
      "build/",
      "# Local configuration file",
      "local.properties",
      "# IntelliJ",
      "*.iml",
      ".idea/",
      "# Android Studio Navigation editor temp files",
      ".navigation/",
      "# Android Studio captures folder",
      "captures/",
      "# Keystore files",
      "*.jks",
      "*.keystore",
      "# External native build folder generated in Android Studio 2.2 and later",
      ".externalNativeBuild/",
      "# Google Services (e.g. APIs or Firebase)",
      "google-services.json",
      "# Freeline",
      "freeline.py",
      "freeline/",
      "freeline_project_description.json"
    ],
    "readme_template": "# Android Project\n\n## Description\nAn Android application project.\n\n## Requirements\n- Android Studio\n- Android SDK\n- Java/Kotlin\n\n## Setup\n1. Open the project in Android Studio\n2. Sync Gradle files\n3. Run the application\n\n## Build\n```bash\n./gradlew assembleDebug\n```"
  },
  "laravel": {
    "name": "Laravel",
    "description": "Laravel PHP framework project",
    "gitignore": [
      "# Laravel specific",
      "/vendor/",
      "/node_modules/",
      "/public/hot",
      "/public/storage",
      "/storage/*.key",
      "/storage/logs/*.log",
      "# Environment files",
      ".env",
      ".env.backup",
      ".env.production",
      "# IDE and editor files",
      ".phpunit.result.cache",
      ".DS_Store",
      "Thumbs.db",
      ".vscode/",
      ".idea/",
      "*.sublime-project",
      "*.sublime-workspace",
      "# Composer",
      "composer.phar",
      "# Laravel Mix",
      "/public/css",
      "/public/js",
      "mix-manifest.json",
      "# Cache and logs",
      "bootstrap/cache/*.php",
      "storage/app/public/*",
      "storage/framework/cache/*",
      "storage/framework/sessions/*",
      "storage/framework/views/*",
      "storage/logs/*",
      "# Testing",
      ".phpunit.cache",
      "coverage/",
      "# Backup files",
      "*.bak",
      "*.swp",
      "*.swo",
      "*~"
    ],
    "readme_template": "# Laravel Project\n\n## Description\nA Laravel PHP framework application.\n\n## Requirements\n- PHP >= 8.1\n- Composer\n- MySQL/PostgreSQL\n- Node.js & NPM (for frontend assets)\n\n## Installation\n```bash\n# Clone the repository\ngit clone [repository-url]\ncd [project-name]\n\n# Install dependencies\ncomposer install\nnpm install\n\n# Environment setup\ncp .env.example .env\nphp artisan key:generate\n\n# Database setup\nphp artisan migrate\nphp artisan db:seed\n```\n\n## Usage\n```bash\n# Start development server\nphp artisan serve\n\n# Compile assets\nnpm run dev\n# or for production\nnpm run build\n```\n\n## Testing\n```bash\nphp artisan test\n```"
  },
  "flutter": {
    "name": "Flutter",
    "description": "Flutter mobile app development project",
    "gitignore": [
      "# Flutter/Dart/Pub related",
      "**/doc/api/",
      "**/ios/Flutter/.last_build_id",
      ".dart_tool/",
      ".flutter-plugins",
      ".flutter-plugins-dependencies",
      ".packages",
      ".pub-cache/",
      ".pub/",
      "/build/",
      "# Symbolication related",
      "app.*.symbols",
      "# Obfuscation related",
      "app.*.map.json",
      "# Android Studio will place build artifacts here",
      "/android/app/debug",
      "/android/app/profile",
      "/android/app/release",
      "# iOS related",
      "**/ios/**/*.mode1v3",
      "**/ios/**/*.mode2v3",
      "**/ios/**/*.moved-aside",
      "**/ios/**/*.pbxuser",
      "**/ios/**/*.perspectivev3",
      "**/ios/**/*sync/",
      "**/ios/**/.sconsign.dblite",
      "**/ios/**/.tags*",
      "**/ios/**/.vagrant/",
      "**/ios/**/DerivedData/",
      "**/ios/**/Icon?",
      "**/ios/**/Pods/",
      "**/ios/**/.symlinks/",
      "**/ios/**/profile",
      "**/ios/**/xcuserdata",
      "**/ios/.generated/",
      "**/ios/Flutter/.last_build_id",
      "**/ios/Flutter/App.framework",
      "**/ios/Flutter/Flutter.framework",
      "**/ios/Flutter/Flutter.podspec",
      "**/ios/Flutter/Generated.xcconfig",
      "**/ios/Flutter/ephemeral/",
      "**/ios/Flutter/app.flx",
      "**/ios/Flutter/app.zip",
      "**/ios/Flutter/flutter_assets/",
      "**/ios/Flutter/flutter_export_environment.sh",
      "**/ios/ServiceDefinitions.json",
      "**/ios/Runner/GeneratedPluginRegistrant.*",
      "# Android related",
      "**/android/**/gradle-wrapper.jar",
      ".gradle/",
      "**/android/captures/",
      "**/android/gradlew",
      "**/android/gradlew.bat",
      "**/android/local.properties",
      "**/android/**/GeneratedPluginRegistrant.java",
      "**/android/key.properties",
      "*.jks",
      "# Web related",
      "lib/generated_plugin_registrant.dart",
      "# Windows related",
      "**/windows/flutter/generated_plugin_registrant.cc",
      "**/windows/flutter/generated_plugin_registrant.h",
      "# Coverage",
      "coverage/",
      "# Exceptions to above rules",
      "!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages",
      "# IDE",
      ".vscode/",
      ".idea/",
      "*.iml",
      "*.ipr",
      "*.iws",
      ".DS_Store"
    ],
    "readme_template": "# Flutter Project\n\n## Description\nA Flutter mobile application.\n\n## Requirements\n- Flutter SDK\n- Dart SDK\n- Android Studio / VS Code\n- Android SDK (for Android development)\n- Xcode (for iOS development, macOS only)\n\n## Getting Started\n```bash\n# Get Flutter dependencies\nflutter pub get\n\n# Run the app\nflutter run\n\n# For specific platform\nflutter run -d android\nflutter run -d ios\n```\n\n## Build\n```bash\n# Build APK (Android)\nflutter build apk\n\n# Build iOS (macOS only)\nflutter build ios\n\n# Build for web\nflutter build web\n```\n\n## Testing\n```bash\n# Run tests\nflutter test\n\n# Run integration tests\nflutter drive --target=test_driver/app.dart\n```\n\n## Project Structure\n- `lib/` - Main Dart code\n- `test/` - Unit and widget tests\n- `android/` - Android-specific code\n- `ios/` - iOS-specific code\n- `web/` - Web-specific code"
  },
  "fastapi": {
    "name": "FastAPI",
    "description": "Modern Python API with Alice architecture patterns",
    "gitignore": [
      "# Alice signature Python FastAPI template",
      "# Byte-compiled / optimized / DLL files",
      "__pycache__/",
      "*.py[cod]",
      "*$py.class",
      "# Virtual environments",
      "venv/",
      "env/",
      "ENV/",
      ".env",
      ".venv",
      "# FastAPI specific",
      ".pytest_cache/",
      "alembic/versions/*.py",
      "!alembic/versions/__init__.py",
      "# Database",
      "*.db",
      "*.sqlite3",
      "# Logs and monitoring",
      "logs/",
      "*.log",
      "# Development files",
      ".coverage",
      "htmlcov/",
      "# IDE",
      ".vscode/",
      ".idea/",
      "*.swp",
      "*.swo",
      "# OS",
      ".DS_Store",
      "Thumbs.db"
    ],
    "readme_template": "# 💜 FastAPI Project - Alice Architecture\\n\\n## Description\\nA modern FastAPI application with Alice's signature development patterns.\\n\\n## Features\\n- ⚡ FastAPI for high performance\\n- 🔄 Async/await support\\n- 📊 Automatic API documentation\\n- 🔐 JWT Authentication\\n- 🗄️ SQLAlchemy ORM\\n- ✅ Pytest testing\\n\\n## Installation\\n```bash\\n# Create virtual environment\\npython -m venv venv\\nsource venv/bin/activate  # Windows: venv\\\\Scripts\\\\activate\\n\\n# Install dependencies\\npip install -r requirements.txt\\n```\\n\\n## Development\\n```bash\\n# Run development server\\nuvicorn main:app --reload\\n\\n# Run tests\\npytest\\n\\n# API Documentation\\n# http://localhost:8000/docs\\n```\\n\\n## Deployment\\n```bash\\n# Production server\\ngunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker\\n```\\n\\n💜 *Built with Alice's modern Python patterns*"
  },
  "nextjs": {
    "name": "Next.js",
    "description": "React framework with TypeScript - Alice preferred stack",
    "gitignore": [
      "# Alice signature Next.js template",
      "# Dependencies",
      "node_modules/",
      "/.pnp",
      ".pnp.js",
      "# Testing",
      "/coverage",
      "# Next.js",
      "/.next/",
      "/out/",
      "# Production builds",
      "build",
      "dist",
      "# Environment variables",
      ".env",
      ".env.local",
      ".env.development.local",
      ".env.test.local",
      ".env.production.local",
      "# Vercel",
      ".vercel",
      "# Logs",
      "npm-debug.log*",
      "yarn-debug.log*",
      "yarn-error.log*",
      "lerna-debug.log*",
      "# TypeScript",
      "*.tsbuildinfo",
      "next-env.d.ts",
      "# IDE",
      ".vscode/",
      ".idea/",
      "*.swp",
      "*.swo",
      "# OS",
      ".DS_Store",
      "Thumbs.db",
      "# Storybook",
      "storybook-static"
    ],
    "readme_template": "# ✨ Next.js Project - Alice Edition\\n\\n## Description\\nA modern Next.js application with TypeScript and Alice's preferred development patterns.\\n\\n## Features\\n- ⚡ Next.js 14+ with App Router\\n- 🔷 TypeScript for type safety\\n- 💜 Tailwind CSS for styling\\n- 🔄 API Routes\\n- 📱 Responsive design\\n- ⚙️ ESLint & Prettier\\n\\n## Getting Started\\n```bash\\n# Install dependencies\\nnpm install\\n# or\\nyarn install\\n\\n# Run development server\\nnpm run dev\\n# or\\nyarn dev\\n```\\n\\n## Available Scripts\\n```bash\\n# Development\\nnpm run dev\\n\\n# Build for production\\nnpm run build\\n\\n# Start production server\\nnpm start\\n\\n# Linting\\nnpm run lint\\n\\n# Type checking\\nnpm run type-check\\n```\\n\\n## Project Structure\\n- `app/` - App Router pages and layouts\\n- `components/` - Reusable UI components\\n- `lib/` - Utility functions and configurations\\n- `public/` - Static assets\\n\\n💜 *Built with Alice's modern React patterns*"
  },
  "alice-portfolio": {
    "name": "Alice Portfolio",
    "description": "Alice signature portfolio template with glassmorphism",
    "gitignore": [
      "# Alice signature portfolio template",
      "# Dependencies",
      "node_modules/",
      "# Build outputs",
      "dist/",
      "build/",
      ".next/",
      "# Environment",
      ".env",
      ".env.local",
      ".env.production",
      "# Logs",
      "*.log",
      "npm-debug.log*",
      "yarn-debug.log*",
      "# Portfolio specific",
      "/portfolio-assets/originals/",
      "/screenshots/raw/",
      "# Development files",
      ".vscode/",
      ".idea/",
      "*.swp",
      "*.swo",
      "# OS generated",
      ".DS_Store",
      "Thumbs.db",
      "# Temporary files",
      "*.tmp",
      "*.temp"
    ],
    "readme_template": "# 💜 Alice Portfolio Project\\n\\n## Description\\nA beautiful portfolio website featuring Alice's signature glassmorphism design and modern development patterns.\\n\\n## Features\\n- ✨ Glassmorphism UI design\\n- 💜 Alice purple color scheme\\n- 📱 Fully responsive\\n- ⚡ Fast loading animations\\n- 🎨 Creative project showcases\\n- 🔄 Smooth transitions\\n- 📊 Project analytics\\n- 💎 Modern CSS effects\\n\\n## Tech Stack\\n- HTML5/CSS3 with modern features\\n- JavaScript ES6+\\n- CSS Grid & Flexbox\\n- Glassmorphism effects\\n- Progressive Web App features\\n\\n## Getting Started\\n```bash\\n# Clone and setup\\ngit clone [repository-url]\\ncd alice-portfolio\\n\\n# Install dependencies (if using build tools)\\nnpm install\\n\\n# Development server\\nnpm start\\n# or open index.html directly\\n```\\n\\n## Customization\\n- Edit `css/colors.css` for color scheme\\n- Modify `js/portfolio-data.js` for project content\\n- Update `assets/` folder with your project images\\n- Customize glassmorphism effects in `css/glass-effects.css`\\n\\n## Deployment\\n- Deploy to any static hosting (Netlify, Vercel, GitHub Pages)\\n- Ensure all assets are optimized\\n- Test glassmorphism effects across browsers\\n\\n✨ *Alice's signature portfolio template - where art meets code* 💜"
  }
}